local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local allMapNames = {
    "BioLab",
    "nStudio",
    "MilBase",
    "House2",
    "Mansion2",
    "Hospital3"
}

if game.PlaceId == 142823291 then
    local Window = Rayfield:CreateWindow({
    Name = "MM2-Hub V.1",
    LoadingTitle = "WZZ Hub Productions",
    LoadingSubtitle = "Created By: WZZ",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "WzzHub"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "WZZ Hub",
       Subtitle = "Key System",
       Note = "DM wzz_09 on discord to obtain key",
       FileName = "WzzHub_Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = false, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"https://raw.githubusercontent.com/WzzRblx/WzzHub/main/main/WzzV1/Files/extra/keys/hub_keys/keyfile"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
      }
    })

    local MainTab = Window:CreateTab("Player", nil) -- Title, Image
    local MainSection = MainTab:CreateSection("Main")
    
    Rayfield:Notify({
       Title = "Script successfully executed!",
       Content = "Successful execution",
       Duration = 5,
       Image = nil,
       Actions = { -- Notification Buttons
          Ignore = {
          Name = "Okay!",
          Callback = function()
          print("User Responded")
       end
      },
    },
    })

    local Button = MainTab:CreateButton({
       Name = "Infinite Jump",
       Callback = function()
       local Player = game:GetService'Players'.LocalPlayer;
local UIS = game:GetService'UserInputService';
 
_G.JumpHeight = 50;
 
function Action(Object, Function) if Object ~= nil then Function(Object); end end
 
UIS.InputBegan:connect(function(UserInput)
if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
Action(Player.Character.Humanoid, function(self)
if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
Action(self.Parent.HumanoidRootPart, function(self)
self.Velocity = Vector3.new(0, _G.JumpHeight, 0);
end)
end
end)
end
end)
     end,
     })

    local WalkSpeedSlider = MainTab:CreateSlider({
       Name = "WalkSpeed",
       Range = {0, 500},
       Increment = 1,
       Suffix = "WalkSpeed",
       CurrentValue = 16,
       Flag = "WalkSpeedSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
       Callback = function(Value)
       local plr = game.Players.LocalPlayer
       local hum = plr.Character:WaitForChild("Humanoid")
       hum.WalkSpeed = Value
   end,
})

    local JumpPowerSlider = MainTab:CreateSlider({
       Name = "Jump Power",
       Range = {0, 500},
       Increment = 1,
       Suffix = "JumpPower",
       CurrentValue = 16,
       Flag = "JumpPowerSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
       Callback = function(Value)
       local plr = game.Players.LocalPlayer
       local hum = plr.Character:WaitForChild("Humanoid")
       hum.JumpHeight = Value
   end,
})


    local GlobalTab = Window:CreateTab("Global", nil) -- Title, Image
    local GlobalSection = GlobalTab:CreateSection("Global")

    local TeleportDropdown = GlobalTab:CreateDropdown({
       Name = "Teleport",
       Options = {"Lobby","Map"},
       CurrentOption = {"Lobby"},
       MultipleOptions = false,
       Flag = "TeleportDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
       Callback = function(Option)
       if Option == "map" then
          for i,currentMap in ipairs(workspace:GetChildren()) do
                for i,mapName in ipairs(allMapNames) do
                      if currentMap.Name == mapName then
                         local tp = currentMap:FindFirstChild("Spawns"):GetChildren()
                         local randomTp = tp[math.random(1, #tp)]
                         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = randomTp.CFrame
                      end
                 end
           end
       elseif Option == "lobby" then
             game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-120.680519, 136.674957, 13.3638725, -0.739968181, -1.87950171e-08, -0.672641873, 4.931929e-08, 1, -8.21978574e-08, 0.672641873, -9.39980183e-08, -0.739968181)
       end
   end,
})
end
